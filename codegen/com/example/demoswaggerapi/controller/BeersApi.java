/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.demoswaggerapi.controller;

import com.example.demoswaggerapi.model.Beer;
import com.example.demoswaggerapi.model.BeerPagedList;
import java.util.UUID;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-02-11T11:10:02.729335600-03:00[America/Sao_Paulo]")
public interface BeersApi {

    Logger log = LoggerFactory.getLogger(BeersApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Delete Beer by Id", description = "Delete a beer resource by its ID value.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Beer Resource Deleted"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteBeerV1(@Parameter(in = ParameterIn.PATH, description = "Beer Id", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default BeersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get Beer by ID", description = "Get a single beer by its ID value.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Found Beer by Id", content = @Content(schema = @Schema(implementation = Beer.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Beer> getBeerByIdV1(@Parameter(in = ParameterIn.PATH, description = "Beer Id", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"beerName\" : \"beerName\",\r\n  \"price\" : 0.8008282,\r\n  \"quantityOnHand\" : 6,\r\n  \"brewery\" : {\r\n    \"name\" : \"name\",\r\n    \"location\" : \"location\"\r\n  },\r\n  \"style\" : \"ALE\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n}", Beer.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default BeersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "List Beers", description = "List all beers in system.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of Beers", content = @Content(schema = @Schema(implementation = BeerPagedList.class))),
        
        @ApiResponse(responseCode = "404", description = "No Beers Found") })
    @RequestMapping(value = "/v1/beers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<BeerPagedList> listBeersV1(@Parameter(in = ParameterIn.QUERY, description = "Page Number" ,schema=@Schema( defaultValue="1")) @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber, @Parameter(in = ParameterIn.QUERY, description = "Page Size" ,schema=@Schema( defaultValue="25")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="25") Integer pageSize) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"content\" : [ {\r\n    \"beerName\" : \"beerName\",\r\n    \"price\" : 0.8008282,\r\n    \"quantityOnHand\" : 6,\r\n    \"brewery\" : {\r\n      \"name\" : \"name\",\r\n      \"location\" : \"location\"\r\n    },\r\n    \"style\" : \"ALE\",\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n  }, {\r\n    \"beerName\" : \"beerName\",\r\n    \"price\" : 0.8008282,\r\n    \"quantityOnHand\" : 6,\r\n    \"brewery\" : {\r\n      \"name\" : \"name\",\r\n      \"location\" : \"location\"\r\n    },\r\n    \"style\" : \"ALE\",\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n  } ]\r\n}", BeerPagedList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default BeersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Update Beer by ID", description = "Update a beer by its ID value.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Beer Updated"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateBeerByIdV1(@Parameter(in = ParameterIn.PATH, description = "Beer Id", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Beer body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default BeersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "New Beer", description = "Create a new Beer Object", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Beer Created"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/beers",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> v1BeersPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Beer body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default BeersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

